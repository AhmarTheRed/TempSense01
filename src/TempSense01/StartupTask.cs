using System;
using Windows.ApplicationModel.Background;
using System.Threading.Tasks;
using Windows.Devices.Spi;
using Windows.Devices.Enumeration;
using Microsoft.Azure.Devices.Client;
using Newtonsoft.Json;
using System.Text;

// The Background Application template is documented at http://go.microsoft.com/fwlink/?LinkID=533884&clcid=0x409

namespace TempSense01
{
    public sealed class StartupTask : IBackgroundTask
    {
        private const int SPI_CHIP_SELECT_LINE = 0;
        private const string SPI_CONTROLLER_NAME = "SPI0";
        private SpiDevice _spiAdc;
        private DeviceClient _deviceClient;
        private const string IotHubUri = IOTHUBURI; //Replace this with URI for your Azure IoT hub. More info at https://azure.microsoft.com/en-gb/documentation/articles/iot-hub-csharp-csharp-getstarted/
        private const string DeviceKey = DEVICEKEY; //Replace this with the device key generated by your Azure IoT hub. More info at https://azure.microsoft.com/en-gb/documentation/articles/iot-hub-csharp-csharp-getstarted/
        private const string DeviceId = DEVICEID; // Replace this with your device name. More info at https://azure.microsoft.com/en-gb/documentation/articles/iot-hub-csharp-csharp-getstarted/

        public async void Run(IBackgroundTaskInstance taskInstance)
        {
            BackgroundTaskDeferral deferral = taskInstance.GetDeferral();

            await InitSpi();

            _deviceClient = DeviceClient.Create(IotHubUri,
                new DeviceAuthenticationWithRegistrySymmetricKey(DeviceId, DeviceKey), TransportType.Http1); 

            await StartGatheringAndUploadingReadings();
        }

        private async Task StartGatheringAndUploadingReadings()
        {
            while (true)
            {
                SendDeviceToCloudMessagesAsync();
                await Task.Delay(15*60*1000);
            }
        }

        private async Task InitSpi()
        {
            try
            {
                var settings = new SpiConnectionSettings(SPI_CHIP_SELECT_LINE)
                {
                    ClockFrequency = 500000, /* 0.5MHz clock rate                                        */
                    Mode = SpiMode.Mode0 /* The ADC expects idle-low clock polarity so we use Mode0  */
                };

                string spiAqs = SpiDevice.GetDeviceSelector(SPI_CONTROLLER_NAME);
                var deviceInfo = await DeviceInformation.FindAllAsync(spiAqs);
                _spiAdc = await SpiDevice.FromIdAsync(deviceInfo[0].Id, settings);
            }
            catch (Exception ex)
            {
                throw new Exception("SPI Initialization Failed", ex);
            }
        }

        private async void SendDeviceToCloudMessagesAsync()
        {
            double tempInC = ReadAdc();

            var tempReadings = new
            {
                deviceId = DeviceId,
                timeStamp = DateTime.Now,
                currentTemp = tempInC
            };
            var messageString = JsonConvert.SerializeObject(tempReadings);
            var message = new Message(Encoding.ASCII.GetBytes(messageString));

            await _deviceClient.SendEventAsync(message);
        }

        private double ReadAdc()
        {
            byte[] readBuffer = new byte[3];
            byte[] writeBuffer = {0x68, 0x00, 0x00};

            _spiAdc.TransferFullDuplex(writeBuffer, readBuffer);
            int adcValue = ConvertToInt(readBuffer);

            //This is based on Voltage Division
            double rV = ((1024D/adcValue) - 1D)*1000D;

            //Steinhart-HartEquation inverted
            double tempK = 1/(9.6564E-04 + (2.1069E-04*Math.Log(rV)) + (8.5826E-08*Math.Pow(Math.Log(rV), 3)));

            double tempC = tempK - 273.15;

            return tempC;
        }

        private int ConvertToInt(byte[] readBuffer)
        {
            var result = readBuffer[0] & 0x03;
            result <<= 8;
            result += readBuffer[1];
            return result;
        }
    }
}